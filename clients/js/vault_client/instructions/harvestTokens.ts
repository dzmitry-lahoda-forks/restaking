/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { JITO_VAULT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const HARVEST_TOKENS_DISCRIMINATOR = 31;

export function getHarvestTokensDiscriminatorBytes() {
  return getU8Encoder().encode(HARVEST_TOKENS_DISCRIMINATOR);
}

export type HarvestTokensInstruction<
  TProgram extends string = typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountProgramAccount extends string | IAccountMeta<string> = string,
  TAccountConfigOrVault extends string | IAccountMeta<string> = string,
  TAccountHarvestAdmin extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountProgramTokenAccount extends string | IAccountMeta<string> = string,
  TAccountDestinationBase extends string | IAccountMeta<string> = string,
  TAccountDestinationTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountProgramAccount extends string
        ? ReadonlyAccount<TAccountProgramAccount>
        : TAccountProgramAccount,
      TAccountConfigOrVault extends string
        ? ReadonlyAccount<TAccountConfigOrVault>
        : TAccountConfigOrVault,
      TAccountHarvestAdmin extends string
        ? ReadonlySignerAccount<TAccountHarvestAdmin> &
            IAccountSignerMeta<TAccountHarvestAdmin>
        : TAccountHarvestAdmin,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountProgramTokenAccount extends string
        ? WritableAccount<TAccountProgramTokenAccount>
        : TAccountProgramTokenAccount,
      TAccountDestinationBase extends string
        ? WritableAccount<TAccountDestinationBase>
        : TAccountDestinationBase,
      TAccountDestinationTokenAccount extends string
        ? WritableAccount<TAccountDestinationTokenAccount>
        : TAccountDestinationTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type HarvestTokensInstructionData = {
  discriminator: number;
  amount: bigint;
};

export type HarvestTokensInstructionDataArgs = { amount: number | bigint };

export function getHarvestTokensInstructionDataEncoder(): Encoder<HarvestTokensInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: HARVEST_TOKENS_DISCRIMINATOR })
  );
}

export function getHarvestTokensInstructionDataDecoder(): Decoder<HarvestTokensInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['amount', getU64Decoder()],
  ]);
}

export function getHarvestTokensInstructionDataCodec(): Codec<
  HarvestTokensInstructionDataArgs,
  HarvestTokensInstructionData
> {
  return combineCodec(
    getHarvestTokensInstructionDataEncoder(),
    getHarvestTokensInstructionDataDecoder()
  );
}

export type HarvestTokensInput<
  TAccountProgramAccount extends string = string,
  TAccountConfigOrVault extends string = string,
  TAccountHarvestAdmin extends string = string,
  TAccountMint extends string = string,
  TAccountProgramTokenAccount extends string = string,
  TAccountDestinationBase extends string = string,
  TAccountDestinationTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  programAccount: Address<TAccountProgramAccount>;
  configOrVault: Address<TAccountConfigOrVault>;
  harvestAdmin: TransactionSigner<TAccountHarvestAdmin>;
  mint: Address<TAccountMint>;
  programTokenAccount: Address<TAccountProgramTokenAccount>;
  destinationBase: Address<TAccountDestinationBase>;
  destinationTokenAccount: Address<TAccountDestinationTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: HarvestTokensInstructionDataArgs['amount'];
};

export function getHarvestTokensInstruction<
  TAccountProgramAccount extends string,
  TAccountConfigOrVault extends string,
  TAccountHarvestAdmin extends string,
  TAccountMint extends string,
  TAccountProgramTokenAccount extends string,
  TAccountDestinationBase extends string,
  TAccountDestinationTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
>(
  input: HarvestTokensInput<
    TAccountProgramAccount,
    TAccountConfigOrVault,
    TAccountHarvestAdmin,
    TAccountMint,
    TAccountProgramTokenAccount,
    TAccountDestinationBase,
    TAccountDestinationTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
): HarvestTokensInstruction<
  typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountProgramAccount,
  TAccountConfigOrVault,
  TAccountHarvestAdmin,
  TAccountMint,
  TAccountProgramTokenAccount,
  TAccountDestinationBase,
  TAccountDestinationTokenAccount,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = JITO_VAULT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    programAccount: { value: input.programAccount ?? null, isWritable: false },
    configOrVault: { value: input.configOrVault ?? null, isWritable: false },
    harvestAdmin: { value: input.harvestAdmin ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    programTokenAccount: {
      value: input.programTokenAccount ?? null,
      isWritable: true,
    },
    destinationBase: { value: input.destinationBase ?? null, isWritable: true },
    destinationTokenAccount: {
      value: input.destinationTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.programAccount),
      getAccountMeta(accounts.configOrVault),
      getAccountMeta(accounts.harvestAdmin),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.programTokenAccount),
      getAccountMeta(accounts.destinationBase),
      getAccountMeta(accounts.destinationTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getHarvestTokensInstructionDataEncoder().encode(
      args as HarvestTokensInstructionDataArgs
    ),
  } as HarvestTokensInstruction<
    typeof JITO_VAULT_PROGRAM_ADDRESS,
    TAccountProgramAccount,
    TAccountConfigOrVault,
    TAccountHarvestAdmin,
    TAccountMint,
    TAccountProgramTokenAccount,
    TAccountDestinationBase,
    TAccountDestinationTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedHarvestTokensInstruction<
  TProgram extends string = typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    programAccount: TAccountMetas[0];
    configOrVault: TAccountMetas[1];
    harvestAdmin: TAccountMetas[2];
    mint: TAccountMetas[3];
    programTokenAccount: TAccountMetas[4];
    destinationBase: TAccountMetas[5];
    destinationTokenAccount: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
  };
  data: HarvestTokensInstructionData;
};

export function parseHarvestTokensInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedHarvestTokensInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      programAccount: getNextAccount(),
      configOrVault: getNextAccount(),
      harvestAdmin: getNextAccount(),
      mint: getNextAccount(),
      programTokenAccount: getNextAccount(),
      destinationBase: getNextAccount(),
      destinationTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getHarvestTokensInstructionDataDecoder().decode(instruction.data),
  };
}
