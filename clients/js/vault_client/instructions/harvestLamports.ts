/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { JITO_VAULT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const HARVEST_LAMPORTS_DISCRIMINATOR = 30;

export function getHarvestLamportsDiscriminatorBytes() {
  return getU8Encoder().encode(HARVEST_LAMPORTS_DISCRIMINATOR);
}

export type HarvestLamportsInstruction<
  TProgram extends string = typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountProgramAccount extends string | IAccountMeta<string> = string,
  TAccountConfigOrVault extends string | IAccountMeta<string> = string,
  TAccountHarvestAdmin extends string | IAccountMeta<string> = string,
  TAccountDestination extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountProgramAccount extends string
        ? WritableAccount<TAccountProgramAccount>
        : TAccountProgramAccount,
      TAccountConfigOrVault extends string
        ? ReadonlyAccount<TAccountConfigOrVault>
        : TAccountConfigOrVault,
      TAccountHarvestAdmin extends string
        ? ReadonlySignerAccount<TAccountHarvestAdmin> &
            IAccountSignerMeta<TAccountHarvestAdmin>
        : TAccountHarvestAdmin,
      TAccountDestination extends string
        ? ReadonlyAccount<TAccountDestination>
        : TAccountDestination,
      ...TRemainingAccounts,
    ]
  >;

export type HarvestLamportsInstructionData = { discriminator: number };

export type HarvestLamportsInstructionDataArgs = {};

export function getHarvestLamportsInstructionDataEncoder(): Encoder<HarvestLamportsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: HARVEST_LAMPORTS_DISCRIMINATOR })
  );
}

export function getHarvestLamportsInstructionDataDecoder(): Decoder<HarvestLamportsInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getHarvestLamportsInstructionDataCodec(): Codec<
  HarvestLamportsInstructionDataArgs,
  HarvestLamportsInstructionData
> {
  return combineCodec(
    getHarvestLamportsInstructionDataEncoder(),
    getHarvestLamportsInstructionDataDecoder()
  );
}

export type HarvestLamportsInput<
  TAccountProgramAccount extends string = string,
  TAccountConfigOrVault extends string = string,
  TAccountHarvestAdmin extends string = string,
  TAccountDestination extends string = string,
> = {
  programAccount: Address<TAccountProgramAccount>;
  configOrVault: Address<TAccountConfigOrVault>;
  harvestAdmin: TransactionSigner<TAccountHarvestAdmin>;
  destination: Address<TAccountDestination>;
};

export function getHarvestLamportsInstruction<
  TAccountProgramAccount extends string,
  TAccountConfigOrVault extends string,
  TAccountHarvestAdmin extends string,
  TAccountDestination extends string,
>(
  input: HarvestLamportsInput<
    TAccountProgramAccount,
    TAccountConfigOrVault,
    TAccountHarvestAdmin,
    TAccountDestination
  >
): HarvestLamportsInstruction<
  typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountProgramAccount,
  TAccountConfigOrVault,
  TAccountHarvestAdmin,
  TAccountDestination
> {
  // Program address.
  const programAddress = JITO_VAULT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    programAccount: { value: input.programAccount ?? null, isWritable: true },
    configOrVault: { value: input.configOrVault ?? null, isWritable: false },
    harvestAdmin: { value: input.harvestAdmin ?? null, isWritable: false },
    destination: { value: input.destination ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.programAccount),
      getAccountMeta(accounts.configOrVault),
      getAccountMeta(accounts.harvestAdmin),
      getAccountMeta(accounts.destination),
    ],
    programAddress,
    data: getHarvestLamportsInstructionDataEncoder().encode({}),
  } as HarvestLamportsInstruction<
    typeof JITO_VAULT_PROGRAM_ADDRESS,
    TAccountProgramAccount,
    TAccountConfigOrVault,
    TAccountHarvestAdmin,
    TAccountDestination
  >;

  return instruction;
}

export type ParsedHarvestLamportsInstruction<
  TProgram extends string = typeof JITO_VAULT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    programAccount: TAccountMetas[0];
    configOrVault: TAccountMetas[1];
    harvestAdmin: TAccountMetas[2];
    destination: TAccountMetas[3];
  };
  data: HarvestLamportsInstructionData;
};

export function parseHarvestLamportsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedHarvestLamportsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      programAccount: getNextAccount(),
      configOrVault: getNextAccount(),
      harvestAdmin: getNextAccount(),
      destination: getNextAccount(),
    },
    data: getHarvestLamportsInstructionDataDecoder().decode(instruction.data),
  };
}
